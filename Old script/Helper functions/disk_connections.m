function [ indices ] = disk_connections( N_th,N_res, sigmaffwd,K_out)
% This functions makes connections between the thalamus and the reservoir.
% It distributes the thalamus neurons homogeneously onto a a disk and does
% the same for the reservoir neurons. For each thalamus neuron K_out
% connections are made to the reservoir neuron. This is done by a adding a
% vector generated by a gaussian distribution with std sigmaffwd to the 
% coordinate of the thalamus neuron. The reservoir neuron closest to this
% 'target' is then chosen to form a connection with. The output of the
% function is an N_th x K_out array where each array are the reservoir
% neurons each thalamus neuron makes a connection with. At the end of the
% function there is also a plot to visualise the connections in the disk. 

% N_th: number of thalamus neurons
% N_res: number of reservoir neurons
% Sigmaffwd: projection 'radius' of thalamus neurons.
% K_out: number of out connections.

% Create random radii and angles and corresponding cartesian coordinates 
A = sqrt(rand(N_th,1)); 
B = 2*pi*rand(N_th,1);
X_th = [A.*cos(B),  A.*sin(B)];
A = sqrt(rand(N_res,1)); 
B = 2*pi*rand(N_res,1);
X_res = [A.*cos(B),  A.*sin(B)];

%
% Make empty array to store connections in 
connections = zeros(N_th,K_out,2);
indices = zeros(N_th , K_out);

for n = 1:N_th
    
    % For each neuron generate outgoing connections
    % Make sure there are no self-connections
%     X_no_self = X;
%     X_no_self(n,:) = [];
    X_no_previous = X_res;
    
    for k = 1:K_out
        
        % Generate pair of numbers from Gausian distribution to represent the
        % distance in each direction from the presynaptic neuron to the
        % postsynaptic neuron.
        
        z = normrnd(0, sigmaffwd, [1,2]);
        
        % Generate postsynaptic target coordinates
        
        x = X_th(n,:) + z;
        
        % Find index closest to target coordinates
        
        % Compute Euclidean distances:
        dist2 = sum((X_no_previous - x) .^ 2, 2);
        % Find the smallest distance 
        index = dist2 == min(dist2);
        closest = X_no_previous(index,:);
        
        % Remove point so new connections are made next time
        X_no_previous(index,:) = nan;
        % Store point
        connections(n,k,:)  = closest;  
        % Store index of point
        indices(n , k) = find(index == 1);
    end
end


%%
% figure(1)
% np = 20;
% plot(X_res(:,1) , X_res(:,2),'k.') 
% hold on
% plot(connections(np,:,1),connections(np,:,2),'ro')
% hold on
% plot(X_th(np,1) , X_th(np,2), 'go')
% hold off
% axis('square')
%%













